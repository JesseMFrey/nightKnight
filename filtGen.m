#!/usr/bin/env octave
%generate filter coefficients for FIR light filter for rocket lamp

%sample rate in Hz
fs=4;

%desired time constant in seconds
tau=4;

%desired cutoff freq
fc=1/(2*pi*tau);

%number of ADC bits
b_adc=12;

%number of adder bits in MAC
b_mac=32;

%load signal package
pkg load signal

%calculate niquest frequency
fn=fs/2;

%number of samples that are saved for processing
adc_vals=16;

%calculate filter coefficients
b=fir1(adc_vals-1,fc/fn);

%calculate maximum ADC value, allow for negative values
adc_max=2^(b_adc-1)-1;

%calculate maximum MAC value, allow for negative values
mac_max=2^(b_mac-1)-1;

%calculate maximum value output
filt_max=adc_max*adc_vals;

%calculate scale factor
scale=mac_max/filt_max;

%scale outputs
b_sc=b*scale;

%check if values are too big
if(any(log2(b_sc)>(b_mac/2-2)))
    scale=(b_mac/2-2)/max(b);

    %scale outputs
    b_sc=b*scale;
end

b_int=round(b_sc);

h_file=fopen('filter.h','w');

fprintf(h_file,'//auto generated by %s\n',mfilename)
fprintf(h_file,'#ifndef FILTER_H_\n');
fprintf(h_file,'#define FILTER_H_\n\n');
fprintf(h_file,'#define NUM_ADC_VALS        %d\n\n',adc_vals);
fprintf(h_file,'extern const int filter_coefs[NUM_ADC_VALS];\n');
fprintf(h_file,'#endif\n\n');

fclose(h_file);

c_file=fopen('filter.c','w');

fprintf(c_file,'//filter coefficients for FIR filter\n');
fprintf(h_file,'//auto generated by %s\n',mfilename)
fprintf(c_file,'#include "filter.h"\n');
fprintf(c_file,'const int filter_coefs[NUM_ADC_VALS]={\n');

%print coefficients in reverse order
for k=adc_vals:-1:1
    fprintf(c_file,'\t%d,\n',b_sc(k));
end

fprintf(c_file,'};\n');

fclose(c_file);
